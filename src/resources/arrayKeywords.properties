@+=       @LAST_MATCH_END\n       @+      This array holds the offsets of the ends of the last successful\n               submatches in the currently active dynamic scope.  $+[0] is the\n               offset into the string of the end of the entire match.  This is\n               the same value as what the "pos" function returns when called\n               on the variable that was matched against.  The _nth element of\n               this array holds the offset of the _nth submatch, so $+[1] is\n               the offset past where $1 ends, $+[2] the offset past where $2\n               ends, and so on.  You can use $#+ to determine how many\n               subgroups were in the last successful match.  See the examples\n               given for the "@-" variable.
$LAST_MATCH_END=
@-=       @LAST_MATCH_START\n       @-      $-[0] is the offset of the start of the last successful match.\n               "$-["_n"]" is the offset of the start of the substring matched\n               by _n-th subpattern, or undef if the subpattern did not match.
@LAST_MATCH_START=       @LAST_MATCH_START\n       @-      $-[0] is the offset of the start of the last successful match.\n               "$-["_n"]" is the offset of the start of the substring matched\n               by _n-th subpattern, or undef if the subpattern did not match.
@ARGV=       @ARGV   The array @ARGV contains the command-line arguments intended\n               for the script.  $#ARGV is generally the number of arguments\n               minus one, because $ARGV[0] is the first argument, _n_o_t the\n               program's command name itself.  See $0 for the command name.
@INC=       @INC    The array @INC contains the list of places that the "do EXPR",\n               "require", or "use" constructs look for their library files.\n               It initially consists of the arguments to any --II command-line\n               switches, followed by the default Perl library, probably\n               _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_p_e_r_l, followed by ".", to represent the current\n               directory.  ("." will not be appended if taint checks are\n               enabled, either by "-T" or by "-t".)  If you need to modify\n               this at runtime, you should use the "use lib" pragma to get the\n               machine-dependent library properly loaded also:\n\n                   use lib '/mypath/libdir/';\n                   use SomeMod;\n\n               You can also insert hooks into the file inclusion system by\n               putting Perl code directly into @INC.  Those hooks may be\n               subroutine references, array references or blessed objects.\n               See "require" in perlfunc for details.
@_=       @ARG\n       @_      Within a subroutine the array @_ contains the parameters passed\n               to that subroutine.  See perlsub.
