%OVERLOAD=
%!=       %OS_ERROR\n       %ERRNO\n       %!      Each element of "%!" has a true value only if $! is set to that\n               value.  For example, $!{ENOENT} is true if and only if the\n               current value of $! is "ENOENT"; that is, if the most recent\n               error was "No such file or directory" (or its moral equivalent:\n               not all operating systems give that exact error, and certainly\n               not all languages).  To check if a particular key is meaningful\n               on your system, use "exists $!{the_key}"; for a list of legal\n               keys, use "keys %!".  See Errno for more information, and also\n               see above for the validity of $!.
%^H=       %^H     The %^H hash provides the same scoping semantic as $^H.  This\n               makes it useful for implementation of lexically scoped pragmas.\n               See perlpragma.
%INC=       %INC    The hash %INC contains entries for each filename included via\n               the "do", "require", or "use" operators.  The key is the\n               filename you specified (with module names converted to\n               pathnames), and the value is the location of the file found.\n               The "require" operator uses this hash to determine whether a\n               particular file has already been included.
%ENV=       %ENV\n       $ENV{expr}\n               The hash %ENV contains your current environment.  Setting a\n               value in "ENV" changes the environment for any child processes\n               you subsequently _f_o_r_k_(_) off.
%SIG=       %SIG\n       $SIG{expr}\n               The hash %SIG contains signal handlers for signals.  For\n               example:\n\n                   sub handler {       # 1st argument is signal name\n                       my($sig) = @_;\n                       print "Caught a SIG$sig--shutting down\\n";\n                       close(LOG);\n                       exit(0);\n                   }\n\n                   $SIG{'INT'}  = \\&handler;\n                   $SIG{'QUIT'} = \\&handler;\n                   ...\n                   $SIG{'INT'}  = 'DEFAULT';   # restore default action\n                   $SIG{'QUIT'} = 'IGNORE';    # ignore SIGQUIT\n\n               Using a value of 'IGNORE' usually has the effect of ignoring\n               the signal, except for the "CHLD" signal.  See perlipc for more\n               about this special case.
